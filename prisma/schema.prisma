generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts                     Account[]
  sessions                     Session[]
  budgetAccounts               BudgetAccount[]
  budgetAccountTransactions    BudgetAccountTransaction[]
  incomeSources                IncomeSource[]
  incomeSourceTransactions     IncomeSourceTransaction[]
  spendingCategories           SpendingCategory[]
  spendingCategoryTransactions SpendingCategoryTransaction[]
  goals                        Goal[]
  goalTransacions              GoalTransaction[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model BudgetAccount {
  id             String            @id @default(cuid())
  userId         String
  title          String
  description    String?
  icon           String?
  type           BudgetAccountType @default(Debit)
  currentBalance Decimal           @default(0)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactionsTo   BudgetAccountTransaction[] @relation("ToBudgetAccount")
  transactionsFrom BudgetAccountTransaction[] @relation("FromBudgetAccount")
}

model IncomeSource {
  id          String  @id @default(cuid())
  userId      String
  title       String
  description String?
  icon        String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions IncomeSourceTransaction[] @relation("Transactions")
}

model SpendingCategory {
  id          String  @id @default(cuid())
  userId      String
  title       String
  description String?
  icon        String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions SpendingCategoryTransaction[] @relation("Transactions")
}

model Goal {
  id             String  @id @default(cuid())
  userId         String
  title          String
  description    String?
  icon           String?
  currentBalance Decimal @default(0)
  monthlyTarget  Decimal @default(0)
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactionsTo   GoalTransaction[] @relation("ToAccount")
  transactionsFrom GoalTransaction[] @relation("FromAccount")
}

enum BudgetAccountType {
  Debt
  Credit
  Debit
}

model BudgetAccountTransaction {
  id                  String   @id @default(cuid())
  userId              String
  fromBudgetAccountId String
  toBudgetAccountId   String
  amount              Decimal
  description         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromBudgetAccount BudgetAccount @relation("FromBudgetAccount", fields: [fromBudgetAccountId], references: [id], onDelete: Cascade)
  toBudgetAccount   BudgetAccount @relation("ToBudgetAccount", fields: [toBudgetAccountId], references: [id], onDelete: Cascade)
}

model IncomeSourceTransaction {
  id                 String   @id @default(cuid())
  userId             String
  fromIncomeSourceId String
  amount             Decimal
  description        String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions IncomeSource @relation("Transactions", fields: [fromIncomeSourceId], references: [id], onDelete: Cascade)
}

model SpendingCategoryTransaction {
  id             String   @id @default(cuid())
  userId         String
  transactionsTo String
  amount         Decimal
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions SpendingCategory @relation("Transactions", fields: [transactionsTo], references: [id], onDelete: Cascade)
}

model GoalTransaction {
  id            String   @id @default(cuid())
  userId        String
  fromAccountId String
  toAccountId   String
  amount        Decimal
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount Goal @relation("FromAccount", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount   Goal @relation("ToAccount", fields: [toAccountId], references: [id], onDelete: Cascade)
}
